// <auto-generated />
using System;
using FinalProjectMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinalProjectMVC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210618101743_seed2PlantCare")]
    partial class seed2PlantCare
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinalProjectMVC.Models.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Massage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FinalProjectMVC.Models.PlantCareModel", b =>
                {
                    b.Property<int>("PlantCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("irrigation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("light")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("plantId")
                        .HasColumnType("int");

                    b.Property<double>("temperature")
                        .HasColumnType("float");

                    b.HasKey("PlantCareId");

                    b.ToTable("PlantCares");

                    b.HasData(
                        new
                        {
                            PlantCareId = 110,
                            irrigation = "Twice",
                            light = "Yes",
                            plantId = 1,
                            temperature = 20.0
                        },
                        new
                        {
                            PlantCareId = 210,
                            irrigation = "Once",
                            light = "Yes",
                            plantId = 2,
                            temperature = 25.0
                        },
                        new
                        {
                            PlantCareId = 310,
                            irrigation = "Twice",
                            light = "No",
                            plantId = 3,
                            temperature = 28.0
                        },
                        new
                        {
                            PlantCareId = 410,
                            irrigation = "Once",
                            light = "No",
                            plantId = 4,
                            temperature = 25.0
                        },
                        new
                        {
                            PlantCareId = 510,
                            irrigation = "Twice",
                            light = "Yes",
                            plantId = 5,
                            temperature = 20.0
                        },
                        new
                        {
                            PlantCareId = 610,
                            irrigation = "Once",
                            light = "Yes",
                            plantId = 6,
                            temperature = 25.0
                        },
                        new
                        {
                            PlantCareId = 710,
                            irrigation = "Twice",
                            light = "No",
                            plantId = 7,
                            temperature = 29.0
                        },
                        new
                        {
                            PlantCareId = 810,
                            irrigation = "Once",
                            light = "No",
                            plantId = 8,
                            temperature = 25.0
                        },
                        new
                        {
                            PlantCareId = 910,
                            irrigation = "Twice",
                            light = "Yes",
                            plantId = 9,
                            temperature = 30.0
                        },
                        new
                        {
                            PlantCareId = 1110,
                            irrigation = "Once",
                            light = "No",
                            plantId = 10,
                            temperature = 25.0
                        },
                        new
                        {
                            PlantCareId = 2110,
                            irrigation = "Twice",
                            light = "Yes",
                            plantId = 11,
                            temperature = 20.0
                        });
                });

            modelBuilder.Entity("FinalProjectMVC.Models.PlantModel", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantHeight")
                        .HasColumnType("int");

                    b.Property<string>("PlantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantStoreStoreId")
                        .HasColumnType("int");

                    b.Property<string>("PlantType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("PlantId");

                    b.HasIndex("PlantStoreStoreId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            PlantId = 1,
                            Image = "https://www.nabataty.com/store/wp-content/uploads/2021/04/2837.jpg",
                            PlantColor = "green",
                            PlantHeight = 40,
                            PlantName = "Rosemary",
                            PlantType = "indoor plants",
                            Price = 200.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 2,
                            Image = "https://www.nabataty.com/store/wp-content/uploads/2021/05/2944.jpg",
                            PlantColor = "green with purple",
                            PlantHeight = 60,
                            PlantName = "Clathia Flame",
                            PlantType = "indoor plants",
                            Price = 300.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 3,
                            Image = "https://cdn.salla.sa/AApPZ/IfXTx6DhLUQHg6T4bF2C1xyegeJCKH5eQTMkG2Rl.jpg",
                            PlantColor = "yellow",
                            PlantHeight = 30,
                            PlantName = "Roses",
                            PlantType = "indoor plants",
                            Price = 40.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 4,
                            Image = "https://www.nabataty.com/store/wp-content/uploads/2020/10/1519.jpg",
                            PlantColor = "pink",
                            PlantHeight = 60,
                            PlantName = "Kaluna",
                            PlantType = "outdoor plants",
                            Price = 100.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 5,
                            Image = "https://d1aqy00qjeidmk.cloudfront.net/upload/product/product1-1605788685.jpg",
                            PlantColor = "green with yellow",
                            PlantHeight = 50,
                            PlantName = "Bird of Paradise",
                            PlantType = "outdoor plants",
                            Price = 200.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 6,
                            Image = "https://static.wixstatic.com/media/a27d24_1415dbffce734563a41e5859a507dc82~mv2.jpg/v1/fill/w_1000,h_1274,al_c,q_90,usm_0.66_1.00_0.01/a27d24_1415dbffce734563a41e5859a507dc82~mv2.jpg",
                            PlantColor = "green",
                            PlantHeight = 70,
                            PlantName = "Chilevera",
                            PlantType = "indoor plants",
                            Price = 150.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 7,
                            Image = "https://www.nabataty.com/store/wp-content/uploads/2020/06/982.jpg",
                            PlantColor = "green",
                            PlantHeight = 120,
                            PlantName = "Olive Tree",
                            PlantType = "outdoor plants",
                            Price = 80.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 8,
                            Image = "https://media.zid.store/thumbs/c9146352-5f34-4d3a-8115-22631018afb2/e19a1dca-ecd5-497b-8c1d-7bf6321a1d8a-thumbnail-370x370.png",
                            PlantColor = "green with purple",
                            PlantHeight = 30,
                            PlantName = "Basil",
                            PlantType = "in/out/door plants",
                            Price = 40.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 9,
                            Image = "https://qtrees.com/wp-content/uploads/2020/10/unnamed.jpg",
                            PlantColor = "green",
                            PlantHeight = 20,
                            PlantName = "Fix",
                            PlantType = "in/out/door plants",
                            Price = 100.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 10,
                            Image = "https://www.nabataty.com/store/wp-content/uploads/2021/01/1910-A.jpg",
                            PlantColor = "green with red",
                            PlantHeight = 40,
                            PlantName = "Newreglia",
                            PlantType = "indoor plants",
                            Price = 300.0,
                            StoreId = 0
                        },
                        new
                        {
                            PlantId = 11,
                            Image = "https://media.zid.store/thumbs/c9146352-5f34-4d3a-8115-22631018afb2/e19a1dca-ecd5-497b-8c1d-7bf6321a1d8a-thumbnail-370x370.png",
                            PlantColor = "green with purple",
                            PlantHeight = 30,
                            PlantName = "Basil",
                            PlantType = "in/out/door plants",
                            Price = 40.0,
                            StoreId = 0
                        });
                });

            modelBuilder.Entity("FinalProjectMVC.Models.PlantStore", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StoreEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorePhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.ToTable("PlantStores");

                    b.HasData(
                        new
                        {
                            StoreId = 100,
                            StoreEmail = "PR@mail.com",
                            StoreLocation = "Riyadh",
                            StoreName = "Plant Store",
                            StorePhoneNo = "011188374"
                        },
                        new
                        {
                            StoreId = 200,
                            StoreEmail = "PJ@mail.com",
                            StoreLocation = "Jeddah",
                            StoreName = "Plant Store",
                            StorePhoneNo = "014883"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FinalProjectMVC.Models.PlantModel", b =>
                {
                    b.HasOne("FinalProjectMVC.Models.PlantStore", null)
                        .WithMany("plant")
                        .HasForeignKey("PlantStoreStoreId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProjectMVC.Models.PlantStore", b =>
                {
                    b.Navigation("plant");
                });
#pragma warning restore 612, 618
        }
    }
}
